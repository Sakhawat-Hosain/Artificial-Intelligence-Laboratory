# -*- coding: utf-8 -*-
"""Assignment_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DVhlR21rLpBmULG2s_betuYc0HNMN9hu
"""

import numpy as np
import matplotlib.pyplot as plt

X = np.loadtxt("jain_feats.txt")
centroid_old = np.loadtxt("jain_centers.txt")

centroid_new = np.zeros((2, 2))

# Show the scatter plot
plt.title('Initial Ploting')
plt.scatter(X[:,0], X[:,1], c='blue', s = 10)
plt.scatter(centroid_old[:,0], centroid_old[:,1], c='orange', s=250, marker='*')
plt.show()

label = np.zeros(X.shape[0])

for e in range(100):
    #Assign points to centroids/clusters:
    for i in range(X.shape[0]):
        dist = np.full(centroid_old.shape[0], np.inf)
        for j in range(centroid_old.shape[0]):
           distance = np.sqrt(np.sum((X[i] - centroid_old[j])**2))  #Euclidean distance
           dist[j] = distance
        label[i] = np.argmin(dist)

    # Update Centroids
    for j in range(centroid_new.shape[0]):
        centroid_new[j] = np.mean(X[label == j], axis=0)

    # Stop condition check
    for j in range(centroid_new.shape[0]):
        diff = np.abs(centroid_new[j] - centroid_old[j])
        if np.max(diff) < 1E-7:
            break
    else:
        for i in range(centroid_new.shape[0]):
            for j in range(centroid_new.shape[1]):
                centroid_old[i, j] = centroid_new[i, j]
        continue
    break

print("Final Cluster Centroids:")
print(centroid_old)
print("Final Assignments to Clusters:")
print(label)

# Show the new scatter plot
plt.scatter(X[label == 0, 0], X[label == 0, 1], c='red', s=10)
plt.scatter(X[label == 1, 0], X[label == 1, 1], c='green', s=10)
plt.scatter(centroid_old[0, 0], centroid_old[0, 1], c='red', marker='*', s=200)
plt.scatter(centroid_old[1, 0], centroid_old[1, 1], c='green', marker='*', s=200)
plt.title('K-means Clustering')
plt.show()